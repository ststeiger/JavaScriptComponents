<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
	<meta charset="utf-8" />
    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />
    <title></title>
    
    <style type="text/css" media="all">
		
        .noselect
        {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

    </style>
    

    <style type="text/css">
        .viewPort {
            position: relative;
            width: 510px;
            height: 300px;
            border: solid 1px;
            overflow-y: scroll;
        }

        .itemContainer {
            position: absolute;
            width: 500px;
            background-color: azure;
        }

        .item {
            position: absolute;
            background-color: beige;
            border: solid 1px;
            width: 500px;
            text-align: center;
        }

        .done {
            color: rgba(0, 0, 0, 0.3);
            text-decoration: line-through;
        }
    </style>

</head>
<body>
    <style type="text/css">
    </style>
    
    <div id="app"></div>
    
    
    <script src="react_depends/snippet-javascript-console.min.js?v=1"></script>
    <script src="react_depends/babel.min.js"></script>
    
    <script src="react_depends/react.min.js"></script>
    <script src="react_depends/react-dom.min.js"></script>
    
    
    <!--
    <script src="https://stacksnippets.net/scripts/snippet-javascript-console.min.js?v=1"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.10.3/babel.min.js"></script>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js"></script>
    -->
    
    
    <!--
    https://cdnjs.com/libraries/react
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.4.1/umd/react.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.4.1/umd/react.production.min.js"></script>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.4.1/cjs/react.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.4.1/cjs/react.production.min.js"></script>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js"></script>
    -->
    
    
    <script type="text/babel">
        const data = []
        function createData(){
        for (let i=0;i
        <1000000;i++){ data.push({name: `Row ${i}`});
                       }
                       }
                       createData();

//Item class to render each of the list rows
        class Item extends React.Component{
        constructor(props){
        super(props);
        }
        render(){
        return (
        <div className="item" style={{top:this.props.top,height:this.props.itemheight}}>
            {this.props.label}
        </div>)

        }
        }


        //The list component that contains the rows and manage the virtual rendering
        // using the vertical scroll position
        class Vlist extends React.Component{
        constructor(props){
        super(props);
        this.numVisibleItems=Math.trunc(300 / this.props.itemheight);
        this.state={
        start:0,
        end:this.numVisibleItems
        }
        this.containerStyle={height:data.length * this.props.itemheight}

        this.scollPos=this.scollPos.bind(this)
        }

        scollPos(){
        let currentIndx=Math.trunc(this.refs.viewPort.scrollTop/this.props.itemheight)
        currentIndx=currentIndx-this.numVisibleItems>=data.length?currentIndx-this.numVisibleItems:currentIndx;
        if (currentIndx!==this.state.start){
        console.log("Redraw");
        this.setState(
        this.state={
        start:currentIndx,
        end:currentIndx+this.numVisibleItems>=data.length ? data.length-1:currentIndx+this.numVisibleItems
        }
        )
        }

        }

        renderRows(){
        let result=[];
        for (let i=this.state.start;i<=this.state.end;i++){
        let item=data[i];
        result.push(
        <Item key={i} label={item.name} top={i*this.props.itemheight} itemheight={this.props.itemheight} />);
        }
        return result;
        }

        render(){
        return (
        <div ref="viewPort" className="viewPort" onScroll={this.scollPos}>
            <div className="itemContainer" style={this.containerStyle}>
                {this.renderRows()}
            </div>
        </div>)
        }

        }

        ReactDOM.render(
        <Vlist itemheight={30} />, document.querySelector("#app"))

    </script>




    <!--
    <script type="text/javascript">
        "use strict";

        var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

        function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

        var data = [];
        function createData()
        {
            for (var i = 0; i < 1000000; i++)
            {
                data.push({ name: "Row " + i });
            }
        }
        createData();

        //Item class to render each of the list rows

        var Item = function (_React$Component)
        {
            _inherits(Item, _React$Component);

            function Item(props)
            {
                _classCallCheck(this, Item);

                return _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this, props));
            }

            _createClass(Item, [{
                key: "render",
                value: function render()
                {
                    return "\n        <div className=\"item\" style={{ top: this.props.top, height: this.props.itemheight }}>\n            {this.props.label}\n        </div>";
                }
            }]);

            return Item;
        }(React.Component);

        //The list component that contains the rows and manage the virtual rendering
        // using the vertical scroll position


        var Vlist = function (_React$Component2)
        {
            _inherits(Vlist, _React$Component2);

            function Vlist(props)
            {
                _classCallCheck(this, Vlist);

                var _this2 = _possibleConstructorReturn(this, (Vlist.__proto__ || Object.getPrototypeOf(Vlist)).call(this, props));

                _this2.numVisibleItems = Math.trunc(300 / _this2.props.itemheight);
                _this2.state = {
                    start: 0,
                    end: _this2.numVisibleItems
                };
                _this2.containerStyle = { height: data.length * _this2.props.itemheight };

                _this2.scollPos = _this2.scollPos.bind(_this2);
                return _this2;
            }

            _createClass(Vlist, [{
                key: "scollPos",
                value: function scollPos()
                {
                    var currentIndx = Math.trunc(this.refs.viewPort.scrollTop / this.props.itemheight);
                    currentIndx = currentIndx - this.numVisibleItems >= data.length ? currentIndx - this.numVisibleItems : currentIndx;
                    if (currentIndx !== this.state.start)
                    {
                        console.log("Redraw");
                        this.setState(this.state = {
                            start: currentIndx,
                            end: currentIndx + this.numVisibleItems >= data.length ? data.length - 1 : currentIndx + this.numVisibleItems
                        });
                    }
                }
            }, {
                key: "renderRows",
                value: function renderRows()
                {
                    var result = [];
                    for (var i = this.state.start; i <= this.state.end; i++)
                    {
                        var item = data[i];
                        result.push("\n        <Item key={i} label={item.name} top={i * this.props.itemheight} itemheight={this.props.itemheight} />");
                    }
                    return result;
                }
            }, {
                key: "render",
                value: function render()
                {
                    return "\n        <div ref=\"viewPort\" className=\"viewPort\" onScroll={this.scollPos}>\n            <div className=\"itemContainer\" style={this.containerStyle}>\n                {this.renderRows()}\n            </div>\n        </div>";
                }
            }]);

            return Vlist;
        }(React.Component);

        ReactDOM.render("\n        <Vlist itemheight={30} />", document.querySelector("#app"));
    </script>
    -->


</body>
</html>
